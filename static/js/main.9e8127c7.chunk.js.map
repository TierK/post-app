{"version":3,"sources":["components/PostHeader/PostHeader.js","components/PostContent/PostContent.js","components/PostButton/PostButton.js","components/PostReactions/PostReactions.js","components/PostComment/PostComment.js","components/PostImage/PostImage.js","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["PostHeader","className","src","this","props","authorProfileImage","alt","href","authorProfileUrl","authorName","dateCreated","Component","PostContent","text","PostButton","state","disabled","onClick","action","disableOnClick","setState","icon","React","defaultProps","PostReactions","likeCount","likePost","commentPost","console","log","commentCount","shareCount","style","width","height","PostComment","userPicUrl","author","likeLink","replayLink","created","PostImage","imageUrl","imageAlt","Post","formatDate","date","Date","getMonth","getDate","content","map","comment","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e8127c7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './PostHeader.scss'\r\n\r\nexport default class PostHeader extends Component {\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div className=\"PostHeader\">\r\n                <img src={this.props.authorProfileImage} alt=\"user pic\"/>\r\n                <div>\r\n                    <a href={this.props.authorProfileUrl}>{this.props.authorName}</a>\r\n                    <span>{this.props.dateCreated}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './PostContent.css';\r\n\r\nexport default class PostContent extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"PostContent\">\r\n                {this.props.text}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './PostButton.scss';\r\n\r\nexport default class PostButton extends React.Component {\r\n    state = {\r\n        disabled: false,\r\n    }\r\n\r\n    onClick = () => {\r\n        this.props.action();\r\n        if (this.props.disableOnClick) {\r\n            this.setState({\r\n                disabled: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button className=\"PostButton btn\" onClick={this.onClick} disabled={this.state.disabled}>\r\n                {this.props.icon} {this.props.text}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nPostButton.defaultProps = {\r\n    disableOnClick: false,\r\n}\r\n\r\n","import React from 'react';\r\nimport PostButton from '../PostButton/PostButton.js';\r\nimport './PostReactions.scss';\r\n\r\n\r\nclass PostReactions extends React.Component {\r\n    state = {\r\n        likeCount: this.props.likeCount || 0,\r\n    };\r\n\r\n\r\n    likePost = () => {\r\n        this.setState(state => ({\r\n            likeCount: state.likeCount + 1,\r\n        }));\r\n    }\r\n\r\n    commentPost = () => {\r\n        console.log('comment clicked');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"PostReactions\">\r\n                <div className=\"reactionsTitles\">\r\n                    {this.state.likeCount} likes   \r\n                    {this.props.commentCount} comments   \r\n                    {this.props.shareCount} shares\r\n                </div>\r\n                <div>\r\n                    <PostButton text=\"Like\" action={this.likePost} disableOnClick={true} icon = {<img src=\"http://pngimg.com/uploads/like/like_PNG42.png\" alt=\"likeIcon\" style={{width: 20 + \"px\", height: 20 + \"px\"}}></img>}/>\r\n                    <PostButton text=\"Comment\" action={this.commentPost} icon = {<img src=\"http://pngimg.com/uploads/hands/hands_PNG908.png\" alt=\"likeIcon\" style={{width: 25 + \"px\", height: 20 + \"px\"}}></img>} />\r\n                    <PostButton text=\"Share\" action={null} icon = {<img src=\"http://pngimg.com/uploads/hands/hands_PNG909.png\" alt=\"likeIcon\" style={{width: 20 + \"px\", height: 20 + \"px\"}}></img>} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostReactions;\r\n","import React, { Component } from 'react'\r\n\r\nexport default class PostComment extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"postComment\">\r\n                <div>\r\n                <div><i href=\"#\"><img src={this.props.userPicUrl} alt =\"user pic\"/> </i></div>\r\n                    <h5>\r\n                        {this.props.author}\r\n                    </h5>\r\n                    {this.props.text}\r\n                    </div>\r\n                <div>{this.props.likeLink} {this.props.replayLink} {this.props.created} </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './PostImage.scss';\r\n\r\nexport default class PostImage extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"PostImage\">\r\n                 <img src={this.props.imageUrl} alt={this.props.imageAlt}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PostHeader from '../PostHeader/PostHeader';\r\nimport PostContent from '../PostContent/PostContent';\r\nimport PostReactions from '../PostReactions/PostReactions';\r\nimport PostComment from '../PostComment/PostComment.js';\r\nimport './Post.scss';\r\nimport PostImage from '../PostImage/PostImage';\r\n\r\nexport default class Post extends Component {\r\n    \r\n    render() {\r\n        function formatDate(){\r\n            const date = new Date();\r\n            const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n            return months[date.getMonth()] + ' ' + date.getDate();\r\n        }\r\n\r\n        return (\r\n            <div className=\"Post\">\r\n                <PostHeader authorName={'Kim'} \r\n                            dateCreated={formatDate(this.props.dateCreated)} \r\n                            authorProfileUrl = {\"http://www.downloadclipart.net/medium/46586-pokemon-icon-images.png\"}\r\n                            authorProfileImage={this.props.authorProfileImage} \r\n                            />\r\n                <PostImage imageUrl = {\"https://i.ytimg.com/vi/q7NFgJ8Zmfs/maxresdefault.jpg\"} imageAlt={\"Tom & Jerry\"} />\r\n                <PostContent text={this.props.content} />\r\n                <PostReactions likeCount={1} />\r\n                {[].map(comment => <PostComment\r\n                                       userPicUrl = {comment.userPicUrl}\r\n                                       author = {comment.author}\r\n                                       text = {comment.text}\r\n                                       likeLink = {comment.likeLink}\r\n                                       replayLink = {comment.replayLink}\r\n                                       created = {formatDate(comment.created)}\r\n                />)}\r\n                <PostComment/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.scss';\nimport Post from './components/Post/Post';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Post/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}